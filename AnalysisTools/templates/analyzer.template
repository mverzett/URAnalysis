#include <iostream>
#include "AnalyzerBase.h"
#include "URStreamer.h"
#include "URDriver.h"

class CLASSNAME : public AnalyzerBase
{
public:
  CLASSNAME(const std::string output_filename):
    AnalyzerBase("CLASSNAME", output_filename) {};
  
  //This method is called once per job at the beginning of the analysis
  //book here your histograms/tree and run every initialization needed
  virtual void begin()
  {
    //outFile_.cd();
  }

  //This method is called once every file, contains the event loop
  //run your proper analysis here
  virtual void analyze()
  {
    //URStreamer event(tree_);
    //while(event.next())
    //{
    //}
  }

  //this method is called at the end of the job, by default saves
  //every histogram/tree produced, override it if you need something more
  //virtual void end();

  //do you need command-line or cfg options? If so implement this 
  //method to book the options you need. CLI parsing is provided
  //by AnalysisFW/interface/URParser.h and uses boost::program_options
  //look here for a quickstart tutorial: 
  //http://www.boost.org/doc/libs/1_51_0/doc/html/program_options/tutorial.html
  static void setOptions() {}
private:
  // Nothing by default
  // Add your private variables/methods here
};

//make it executable
int main(int argc, char *argv[])
{
  URParser &parser = URParser::instance(argc, argv);
  URDriver<CLASSNAME> test;
  return test.run();
}
